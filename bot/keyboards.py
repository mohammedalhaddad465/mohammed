# keyboards.py
# ูุฐุง ุงูููู ูุนุฑูู ููุญุงุช ุงูููุงุชูุญ "Reply Keyboard" ููุท (ุงููุณุชุฎุฏูุฉ ุญุงูููุง ูู bot.py)
# ูููููุฏ ุงูููุงุฆู ุงูุฏููุงููููุฉ ูููุณุชููุงุชุ ุงูุฃุชุฑุงูุ ุงูููุงุฏุ ุงูุฃูุณุงูุ ุงูููุงุชุฑุ ุงูุณููุงุชุ ุงููุญุงุถุฑููุ ูุนูุงููู ุงููุญุงุถุฑุงุช.

from telegram import ReplyKeyboardMarkup
from .config import ADMIN_USER_IDS
# -----------------------------------------------------------------------------
# ุซูุงุจุช ูุตูุต ุงูุฃุฒุฑุงุฑ (ูุฌุจ ุฃู ุชุจูู ูุชุทุงุจูุฉ ูุน ูุง ูุณุชุฎุฏูู bot.py)
# -----------------------------------------------------------------------------
TERM_MENU_SHOW_SUBJECTS = "๐ ุนุฑุถ ุงูููุงุฏ"
TERM_MENU_PLAN          = "๐ ุงูุฎุทุฉ ุงูุฏุฑุงุณูุฉ"
TERM_MENU_LINKS         = "๐ ุฑูุงุจุท ุงููุฌููุนุงุช ูุงููููุงุช"
TERM_MENU_ADV_SEARCH    = "๐ ุงูุจุญุซ ุงููุชูุฏู"

BACK               = "๐ ุงูุนูุฏุฉ"
BACK_TO_LEVELS     = "๐ ุงูุนูุฏุฉ ููุงุฆูุฉ ุงููุณุชููุงุช"
BACK_TO_SUBJECTS   = "๐ ุงูุนูุฏุฉ ููุงุฆูุฉ ุงูููุงุฏ"

FILTER_BY_YEAR     = "๐ ุญุณุจ ุงูุณูุฉ"
FILTER_BY_LECTURER = "๐ค ุญุณุจ ุงููุญุงุถุฑ"
LIST_LECTURES      = "๐ ุนุฑุถ ุงููุญุงุถุฑุงุช"

YEAR_MENU_LECTURES = "๐ ุงููุญุงุถุฑุงุช"

# ุชุณููุงุช ุงูุฃูุณุงู (ูุงุฌูุฉ) โ ุฑููุฒ ุงูุฃูุณุงู (ุฏุงุฎู ูุงุนุฏุฉ ุงูุจูุงูุงุช)
SECTION_LABELS = {
    "theory":    "๐ ูุธุฑู",
    "discussion":"๐ฌ ููุงูุดุฉ",
    "lab":       "๐งช ุนููู",
    "syllabus":  "๐ ุงูููุฑุฏุงุช ุงูุฏุฑุงุณูุฉ",
    "apps":      "๐ฑ ุชุทุจููุงุช",
}
LABEL_TO_SECTION = {v: k for k, v in SECTION_LABELS.items()}

# ุชุณููุงุช ุนุฑุจูุฉ ูุชุตูููุงุช ุงููููุงุช (ูุงุฌูุฉ) โ ุฃุณูุงุก ุงูุชุตูููุงุช ูู ุงููุงุนุฏุฉ
CATEGORY_TO_LABEL = {
    "lecture":       "๐ ููู ุงููุญุงุถุฑุฉ",
    "slides":        "๐ ุณูุงูุฏุงุช ุงููุญุงุถุฑุฉ",
    "audio":         "๐ง ุชุณุฌูู ุตูุชู",
    "video":         "๐ฅ ุชุณุฌูู ููุฏูู",
    "board_images":  "๐ผ๏ธ ุตูุฑ ุงูุณุจูุฑุฉ",
    "external_link": "๐ ุฑูุงุจุท ุฎุงุฑุฌูุฉ",
    "exam":          "๐ ุงูุงูุชุญุงูุงุช",
    "booklet":       "๐ ุงูููุงุฒู",
    "summary":       "๐งพ ููุฎุต",
    "notes":         "๐๏ธ ููุงุญุธุงุช",
    "simulation":    "๐งช ูุญุงูุงุฉ",
    "mind_map":      "๐บ๏ธ ุฎุฑุงุฆุท ุฐูููุฉ",
    "transcript":    "โจ๏ธ ุชูุฑูุบ ุตูุชู",
    "related":       "๐ ูููุงุช ุฐุงุช ุตูุฉ",
}
LABEL_TO_CATEGORY = {v: k for k, v in CATEGORY_TO_LABEL.items()}

# ูู ูุงุฆูุฉ ุงููุญุงุถุฑ: ุฎูุงุฑุงุช ุฅุถุงููุฉ
CHOOSE_YEAR_FOR_LECTURER   = "๐ ุงุฎุชุฑ ุงูุณูุฉ"
LIST_LECTURES_FOR_LECTURER = "๐ ูุญุงุถุฑุงุช ูุฐุง ุงููุญุงุถุฑ"

# -----------------------------------------------------------------------------
# ููุณุงุนุฏ ุฏุงุฎูู ูุชุฌุฒุฆุฉ ุงูุนูุงุตุฑ ุฅูู ุตููู ุจุนุฏุฏ ุฃุนูุฏุฉ ุซุงุจุช (ูุชูุงุณู ุญุฌู ุงูููุงุฆู)
# -----------------------------------------------------------------------------
def _rows(items: list[str], cols: int = 2) -> list[list[str]]:
    """
    ูููุณูู ูุงุฆูุฉ ุงูุนูุงุตุฑ ุฅูู ุตููู ุจุนุฏุฏ ุฃุนูุฏุฉ ูุญุฏุฏ (ุงูุชุฑุงุถููุง ุนููุฏุงู)
    ููุญุตูู ุนูู ูุธูุฑ ูุชูุงุณู ุนุจุฑ ูู ุงูููุงุฆู.
    """
    keyboard, row = [], []
    for item in items:
        row.append(item)
        if len(row) == cols:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    return keyboard

# -----------------------------------------------------------------------------
# ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ (Reply Keyboard)
# -----------------------------------------------------------------------------
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        ["๐ ุงููุณุชููุงุช", "๐ ุงูุฎุทุฉ ุงูุฏุฑุงุณูุฉ"],
        ["๐ง ุงูุจุฑุงูุฌ ุงูููุฏุณูุฉ", "๐ ุจุญุซ"],
        ["๐ก ุงููููุงุช ูุงููุฌููุนุงุช", "๐ ูุณุงุนุฏุฉ"],
        ["๐จ ุชูุงุตู ูุนูุง"],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
    input_field_placeholder="ุงุฎุชุฑ ุฎูุงุฑูุง ูู ุงููุงุฆูุฉ  โฌ๏ธ",
)

# -----------------------------------------------------------------------------
# ูููุฏุงุช ููุญุงุช ุงูููุงุชูุญ ุงูุฏููุงููููุฉ ุงููุณุชุฎุฏูุฉ ูู bot.py
# -----------------------------------------------------------------------------
def generate_levels_keyboard(levels: list) -> ReplyKeyboardMarkup:
    """
    ูุนุฑุถ ูุงุฆูุฉ ุงููุณุชููุงุช (ุจุงูุฃุณูุงุก ููุท).
    levels: [(id, name), ...] โ ูุณุชุฎุฏู ุงูุงุณู ูู ุงูุฒุฑ.
    """
    names = [name for _id, name in levels]
    keyboard = _rows(names, cols=2)
    keyboard.append(["๐ ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ"])
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="ุฅุฎุชุฑ ุงููุณุชูู ุงูุฏุฑุงุณู  โฌ๏ธ",
    )

def generate_terms_keyboard(terms: list) -> ReplyKeyboardMarkup:
    """
    ูุนุฑุถ ูุงุฆูุฉ ุงูุฃุชุฑุงู ุงูุชุงุจุนุฉ ููุณุชูู ูุญุฏุฏ.
    terms: [(id, name), ...]
    """
    names = [name for _id, name in terms]
    keyboard = _rows(names, cols=2)
    keyboard.append([BACK])
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="ุฅุฎุชุฑ ุงููุตู ุงูุฏุฑุงุณู  โฌ๏ธ",
    )

def generate_subjects_keyboard(subjects: list) -> ReplyKeyboardMarkup:
    """
    ูุนุฑุถ ูุงุฆูุฉ ููุงุฏ ุงูุชุฑู ุงูุญุงูู.
    subjects: [(name,), ...]
    """
    names = [name for (name,) in subjects]
    keyboard = _rows(names, cols=2)
    keyboard.append([BACK])
    keyboard.append([BACK_TO_LEVELS])  # ุงูุฑุฌูุน ูุจุงุดุฑุฉ ูููุณุชููุงุช ูู ููุง ูููุฏ
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="ุฅุฎุชุฑ ุงูููุฑุฑ ุงูุฏุฑุงุณู  โฌ๏ธ",
    )

def generate_term_menu_keyboard_dynamic(flags: dict) -> ReplyKeyboardMarkup:
    """
    ููุดุฆ ุฃุฒุฑุงุฑ ูุงุฆูุฉ ุงูุชุฑู ุญุณุจ ุงููุชููุฑ ูุนูููุง:
    flags = {'has_subjects': bool, 'has_syllabus': bool, 'has_links': bool}
    """
    items: list[str] = []
    if flags.get("has_subjects"):
        items.append(TERM_MENU_SHOW_SUBJECTS)
    if flags.get("has_syllabus"):
        items.append(TERM_MENU_PLAN)
    if flags.get("has_links"):
        items.append(TERM_MENU_LINKS)
    # ุฅุธูุงุฑ ุงูุจุญุซ ุฅู ุชูููุฑ ุฃู ูุญุชูู
    if flags.get("has_subjects") or flags.get("has_syllabus") or flags.get("has_links"):
        items.append(TERM_MENU_ADV_SEARCH)

    keyboard = _rows(items, cols=2)
    keyboard.append([BACK, BACK_TO_LEVELS])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def generate_subject_sections_keyboard_dynamic(sections: list[str]) -> ReplyKeyboardMarkup:
    """
    ูุนุฑุถ ููุท ุงูุฃูุณุงู ุงูููุฌูุฏุฉ ูุนูููุง ูููุงุฏุฉ (ุญุณุจ ุฌุฏูู materials).
    sections: ููู ุฏุงุฎููุฉ ูุซู 'theory','discussion','lab','syllabus','apps'
    """
    labels = [SECTION_LABELS[s] for s in sections if s in SECTION_LABELS]
    keyboard = _rows(labels, cols=2)
    keyboard.append([BACK])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def generate_section_filters_keyboard_dynamic(
    years_exist: bool, lecturers_exist: bool, lectures_exist: bool
) -> ReplyKeyboardMarkup:
    """
    ููููุฑ ููุงุชุฑ ุงููุณู: ุญุณุจ ุงูุณูุฉ/ุงููุญุงุถุฑ/ุนุฑุถ ูู ุงููุญุงุถุฑุงุช.
    ููุง ูุถูู ุฃุฒุฑุงุฑ ุงูุฑุฌูุน ุงูููุงุณุจุฉ.
    """
    first_row: list[str] = []
    if years_exist:
        first_row.append(FILTER_BY_YEAR)
    if lecturers_exist:
        first_row.append(FILTER_BY_LECTURER)

    keyboard: list[list[str]] = []
    if first_row:
        keyboard.append(first_row)
    if lectures_exist:
        keyboard.append([LIST_LECTURES])

    keyboard.append([BACK, BACK_TO_SUBJECTS])
    keyboard.append([BACK_TO_LEVELS])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def generate_years_keyboard(years: list[tuple[int, str]]) -> ReplyKeyboardMarkup:
    """
    ูุนุฑุถ ุงูุณููุงุช ุงููุชุงุญุฉ ููุณู/ูุงุฏุฉ (ููุฏ ุชููู ูุฌุฑู ููุท ููุง ูู ูุดุฑูุนู).
    years: [(id, name), ...] โ ูุนุฑุถ ุงูุงุณู ูุฒุฑ.
    """
    names = [name for _id, name in years]
    keyboard = _rows(names, cols=2)
    keyboard.append([BACK, BACK_TO_SUBJECTS])
    keyboard.append([BACK_TO_LEVELS])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def generate_lecturers_keyboard(lecturers: list[tuple[int, str]]) -> ReplyKeyboardMarkup:
    """
    ูุนุฑุถ ุงููุญุงุถุฑูู ุงููุฑุชุจุทูู ุจุงููุณู/ุงููุงุฏุฉ.
    lecturers: [(id, name), ...] โ ูุนุฑุถ ุงูุงุณู ูุฒุฑ.
    """
    names = [name for _id, name in lecturers]
    keyboard = _rows(names, cols=2)
    keyboard.append([BACK, BACK_TO_SUBJECTS])
    keyboard.append([BACK_TO_LEVELS])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def generate_lecture_titles_keyboard(titles: list[str]) -> ReplyKeyboardMarkup:
    """
    ูุนุฑุถ ุนูุงููู ุงููุญุงุถุฑุงุช (ูุฏ ุชูุตููู ุญุณุจ ุณูุฉ/ูุญุงุถุฑ).
    """
    keyboard = _rows(titles, cols=2)
    keyboard.append([BACK, BACK_TO_SUBJECTS])
    keyboard.append([BACK_TO_LEVELS])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def generate_lecturer_filter_keyboard(years_exist: bool, lectures_exist: bool) -> ReplyKeyboardMarkup:
    """
    ุฏุงุฎู ุตูุญุฉ ุงููุญุงุถุฑ: ุฅููุง ุงุฎุชูุงุฑ ุณูุฉ ูุฐูู ุงููุญุงุถุฑ ุฃู ุนุฑุถ ูู ูุญุงุถุฑุงุชู.
    """
    row: list[str] = []
    if years_exist:
        row.append(CHOOSE_YEAR_FOR_LECTURER)
    if lectures_exist:
        row.append(LIST_LECTURES_FOR_LECTURER)

    keyboard: list[list[str]] = []
    if row:
        keyboard.append(row)
    keyboard.append([BACK])  # ุฑุฌูุน ุฎุทูุฉ ูุงุญุฏุฉ
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def generate_year_category_menu_keyboard(categories: list[str], lectures_exist: bool) -> ReplyKeyboardMarkup:
    """
    ุดุงุดุฉ ุณูุฉ ูุนููุฉ: ุชุนุฑุถ (๐ ุงููุญุงุถุฑุงุช) + ุงูุชุตูููุงุช ุงูุนุงูุฉ ููุณูุฉ
    (ูุน ุฅุฎูุงุก ูุฑููุงุช ุงููุญุงุถุฑุงุช ูุซู ุงูุณูุงูุฏุงุช ูุงูุตูุชูุงุชโฆ ุญุณุจ ููุทู db.list_categories_for_subject_section_year).
    """
    labels = [CATEGORY_TO_LABEL.get(c, c) for c in categories]
    first_row: list[str] = []
    if lectures_exist:
        first_row.append(YEAR_MENU_LECTURES)

    keyboard: list[list[str]] = []
    if first_row:
        keyboard.append(first_row)
    keyboard += _rows(labels, cols=2)

    keyboard.append([BACK, BACK_TO_SUBJECTS])
    keyboard.append([BACK_TO_LEVELS])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def generate_lecture_category_menu_keyboard(categories: list[str]) -> ReplyKeyboardMarkup:
    """
    ุดุงุดุฉ ูุญุงุถุฑุฉ ูุญุฏุฏุฉ: ุชุนุฑุถ ุชุตูููุงุช ุงููููุงุช ุงูุฎุงุตุฉ ุจูุฐู ุงููุญุงุถุฑุฉ (ุณูุงูุฏุงุช/ุตูุช/ููุฏูู/ุตูุฑ ุณุจูุฑุฉ/โฆ).
    """
    labels = [CATEGORY_TO_LABEL.get(c, c) for c in categories]
    keyboard = _rows(labels, cols=2)
    keyboard.append([BACK, BACK_TO_SUBJECTS])
    keyboard.append([BACK_TO_LEVELS])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


